/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Main;

import Helper.Currency;
import Helper.konversiintbln;
//import chart.ModelChart;
import java.util.prefs.Preferences;
import javax.swing.JLabel;
import Config.DB;
import Helper.FormatTanggal;
import View.Auth.login;
import java.sql.ResultSet;
import com.formdev.flatlaf.FlatClientProperties;
import com.formdev.flatlaf.extras.FlatSVGIcon;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Toolkit;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import com.formdev.flatlaf.extras.FlatSVGIcon;
import java.awt.Image;
import javax.swing.ImageIcon;
import chartbarmultiple.ModelChart;
import chartsinglebar.ModelChartSingel;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;
import javax.swing.table.DefaultTableModel;
import net.miginfocom.swing.MigLayout;
import raven.chart.ChartLegendRenderer;
import raven.chart.data.category.DefaultCategoryDataset;
import raven.chart.line.LineChart;
import table.TableCustom;

/**
 *
 * @author AkbarMr.
 */
public class DashboardView extends javax.swing.JPanel {

    /**
     * Creates new form DashboardView
     */
    Preferences userPreferences = Preferences.userNodeForPackage(DashboardView.class);
    private Object statement;
    private LineChart lineChart;

    public DashboardView() {

        Preferences userPreferences = Preferences.userNodeForPackage(login.class);

        initComponents();

        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        //        iconn.setIcon(new FlatSVGIcon("Assets/svg/svgtau.svg" ));
        //        ImageIcon MINI = images("/Assets/iconnc.png", 32, 32);
        //        iconn.setIcon(MINI);
        // Hitung ukuran JFrame
        int width = (int) (screenSize.width * 0.9);
        int height = (int) (screenSize.height * 0.9);
        setSize(width, height);
        //        chart();
        ntf_stok();
        ntf_exp();
        items();
        pendapatan1hari();
        pengeluaran1hari();
        panelchartterlaris();
        createLineChart();
        lineChart.startAnimation();
        TableCustom.apply(jScrollPane1, TableCustom.TableType.MULTI_LINE);
        TableCustom.apply(jScrollPane3, TableCustom.TableType.MULTI_LINE);
        TableCustom.apply(jScrollPane4, TableCustom.TableType.MULTI_LINE);


        //        jLabel2.setText(userPreferences.get("Username", null));
    }

    private ImageIcon images(String path, int WIDTH, int HEIGHT) {
        System.out.println(path);
        ImageIcon img = new ImageIcon(getClass().getResource(path));
        Image image = (img).getImage().getScaledInstance(WIDTH, HEIGHT, Image.SCALE_SMOOTH);
        img = new ImageIcon(image);
        return img;
    }

    public void reset() {
        removeAll();
        initComponents();
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();

        // Hitung ukuran JFrame
        int width = (int) (screenSize.width * 0.9);
        int height = (int) (screenSize.height * 0.9);
        setSize(width, height);
        //        chart();
        ntf_stok();
        ntf_exp();
        items();
        pendapatan1hari();
        pengeluaran1hari();
        panelchartterlaris();
        createLineChart();
        lineChart.startAnimation();
        LocalDate tanggalSekarang = LocalDate.now();
        LocalDate bulanKemarin = tanggalSekarang.minusMonths(1);
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MMMM");
        String namaBulan = bulanKemarin.format(formatter);

        // Menampilkan obat terlaris bulan kemarin dengan nama bulannya
        String infoTerlarisText = "Obat Terlaris Bulan " + namaBulan;
        infoTerlarisHeader.setText(infoTerlarisText);
        desc_terlaris.setText("Daftar obat terlaris pada bulan "+namaBulan);
        TableCustom.apply(jScrollPane1, TableCustom.TableType.MULTI_LINE);
        TableCustom.apply(jScrollPane3, TableCustom.TableType.MULTI_LINE);
        TableCustom.apply(jScrollPane4, TableCustom.TableType.MULTI_LINE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        modalobat = new javax.swing.JDialog();
        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableobat = new javax.swing.JTable();
        desc_terlaris = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        modalkadaluarsa = new javax.swing.JDialog();
        jPanel6 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablekadaluarsa = new javax.swing.JTable();
        modalstok = new javax.swing.JDialog();
        jPanel10 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tabelstok = new javax.swing.JTable();
        notif_panel = new Components.CustomPanel();
        jPanel9 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        notif_exp = new javax.swing.JScrollPane();
        jPanel12 = new javax.swing.JPanel();
        chart_panel = new javax.swing.JPanel();
        jPanel2 = new Components.CustomPanel();
        jPanel11 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        notif_stok = new javax.swing.JScrollPane();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        item_panel = new Components.CustomPanel();
        item_panel.putClientProperty(FlatClientProperties.STYLE, "arc:20");
        total_items = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        pendapatanperhari = new Components.CustomPanel();
        pendapatan_harini = new javax.swing.JLabel();
        pendapatanLabel = new javax.swing.JLabel();
        pengeluaranperhari = new Components.CustomPanel();
        pengeluaran_harini = new javax.swing.JLabel();
        pengeluaran = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        chart2 = new chartsinglebar.Chart();
        panelobatterlaris = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel7 = new javax.swing.JPanel();
        infoTerlarisHeader = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();

        modalobat.setBackground(new java.awt.Color(255, 255, 255));
        modalobat.setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setForeground(new java.awt.Color(0, 0, 0));

        jLabel5.setFont(new java.awt.Font("Poppins", 1, 24)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel5.setText("Obat Terlaris");

        tableobat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No", "Nama Obat", "Keuntungan"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableobat.setGridColor(new java.awt.Color(60, 63, 65));
        tableobat.setShowGrid(true);
        tableobat.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tableobat);
        if (tableobat.getColumnModel().getColumnCount() > 0) {
            tableobat.getColumnModel().getColumn(0).setMinWidth(40);
            tableobat.getColumnModel().getColumn(0).setMaxWidth(40);
            tableobat.getColumnModel().getColumn(1).setMinWidth(500);
            tableobat.getColumnModel().getColumn(1).setMaxWidth(500);
            tableobat.getColumnModel().getColumn(2).setResizable(false);
        }

        desc_terlaris.setFont(new java.awt.Font("Poppins", 0, 16)); // NOI18N
        desc_terlaris.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        desc_terlaris.setText("Daftar obat terlaris pada bulan ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 730, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(desc_terlaris, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(20, 20, 20))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(desc_terlaris, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 366, Short.MAX_VALUE)
                .addGap(20, 20, 20))
        );

        jPanel8.setForeground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 770, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 484, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout modalobatLayout = new javax.swing.GroupLayout(modalobat.getContentPane());
        modalobat.getContentPane().setLayout(modalobatLayout);
        modalobatLayout.setHorizontalGroup(
            modalobatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(modalobatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        modalobatLayout.setVerticalGroup(
            modalobatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(modalobatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        modalkadaluarsa.setModal(true);

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));

        jLabel6.setFont(new java.awt.Font("Poppins", 1, 24)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("List Obat Akan Kadaluarsa Dan Kadaluarsa");

        tablekadaluarsa.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No", "Nama Obat", "Qty", "Tanggal Kadaluarsa", "Keterangan"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablekadaluarsa.setShowGrid(true);
        tablekadaluarsa.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(tablekadaluarsa);
        if (tablekadaluarsa.getColumnModel().getColumnCount() > 0) {
            tablekadaluarsa.getColumnModel().getColumn(0).setMinWidth(70);
            tablekadaluarsa.getColumnModel().getColumn(0).setMaxWidth(70);
            tablekadaluarsa.getColumnModel().getColumn(1).setResizable(false);
            tablekadaluarsa.getColumnModel().getColumn(2).setResizable(false);
            tablekadaluarsa.getColumnModel().getColumn(3).setResizable(false);
            tablekadaluarsa.getColumnModel().getColumn(4).setResizable(false);
        }

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 866, Short.MAX_VALUE)
                        .addGap(8, 8, 8))
                    .addComponent(jScrollPane3))
                .addGap(18, 18, 18))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE)
                .addGap(21, 21, 21))
        );

        javax.swing.GroupLayout modalkadaluarsaLayout = new javax.swing.GroupLayout(modalkadaluarsa.getContentPane());
        modalkadaluarsa.getContentPane().setLayout(modalkadaluarsaLayout);
        modalkadaluarsaLayout.setHorizontalGroup(
            modalkadaluarsaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        modalkadaluarsaLayout.setVerticalGroup(
            modalkadaluarsaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        modalstok.setModal(true);

        jPanel10.setBackground(new java.awt.Color(255, 255, 255));

        jLabel7.setFont(new java.awt.Font("Poppins", 1, 24)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("List Stok Obat Akan Habis Dan Habis");

        tabelstok.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No", "Nama Obat", "Stok", "Keterangan"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelstok.setShowGrid(true);
        tabelstok.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(tabelstok);
        if (tabelstok.getColumnModel().getColumnCount() > 0) {
            tabelstok.getColumnModel().getColumn(0).setMinWidth(40);
            tabelstok.getColumnModel().getColumn(0).setMaxWidth(40);
            tabelstok.getColumnModel().getColumn(1).setMinWidth(500);
            tabelstok.getColumnModel().getColumn(1).setMaxWidth(500);
            tabelstok.getColumnModel().getColumn(2).setResizable(false);
            tabelstok.getColumnModel().getColumn(3).setResizable(false);
        }

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 928, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jScrollPane4)
                .addGap(21, 21, 21))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout modalstokLayout = new javax.swing.GroupLayout(modalstok.getContentPane());
        modalstok.getContentPane().setLayout(modalstokLayout);
        modalstokLayout.setHorizontalGroup(
            modalstokLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        modalstokLayout.setVerticalGroup(
            modalstokLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setPreferredSize(new java.awt.Dimension(1221, 406));
        addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                formAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        notif_panel.setBackground(new java.awt.Color(255, 255, 255));
        //notif_panel.putClientProperty(FlatClientProperties.STYLE, "arc:20");

        jPanel9.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Poppins SemiBold", 0, 16)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(58, 98, 215));
        jLabel1.setText("Daftar obat kadaluarsa / akan kadaluarsa  ");
        jLabel1.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(102, 102, 102)));

        jButton4.setText("jButton4");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 409, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jButton4)
                .addComponent(jLabel1))
        );

        notif_exp.setBackground(new java.awt.Color(51, 51, 51));
        notif_exp.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        jPanel12.setBackground(new java.awt.Color(255, 255, 255));
        jPanel12.setLayout(new javax.swing.BoxLayout(jPanel12, javax.swing.BoxLayout.Y_AXIS));
        notif_exp.setViewportView(jPanel12);

        javax.swing.GroupLayout notif_panelLayout = new javax.swing.GroupLayout(notif_panel);
        notif_panel.setLayout(notif_panelLayout);
        notif_panelLayout.setHorizontalGroup(
            notif_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(notif_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(notif_exp)
                .addContainerGap())
        );
        notif_panelLayout.setVerticalGroup(
            notif_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(notif_panelLayout.createSequentialGroup()
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(notif_exp, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                .addContainerGap())
        );

        chart_panel.putClientProperty(FlatClientProperties.STYLE, "arc:20");
        chart_panel.setBackground(new java.awt.Color(255, 255, 255));
        chart_panel.setOpaque(false);
        chart_panel.setLayout(new java.awt.BorderLayout());

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jPanel11.setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setFont(new java.awt.Font("Poppins SemiBold", 0, 16)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(58, 98, 215));
        jLabel2.setText("Daftar stok habis / akan habis");
        jLabel2.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(102, 102, 102)));

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel2)
                .addComponent(jButton1))
        );

        notif_stok.setHorizontalScrollBar(null);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        jPanel3.setToolTipText("Notifiksai Stok Obat");
        jPanel3.setLayout(new javax.swing.BoxLayout(jPanel3, javax.swing.BoxLayout.Y_AXIS));
        notif_stok.setViewportView(jPanel3);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(notif_stok)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(notif_stok)
                .addContainerGap())
        );

        jPanel4.putClientProperty(FlatClientProperties.STYLE, "arc:20");
        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        item_panel.setBackground(new java.awt.Color(58, 98, 215));
        item_panel.setBorder(javax.swing.BorderFactory.createEmptyBorder(8, 8, 8, 5));
        item_panel.setPreferredSize(new java.awt.Dimension(294, 75));

        total_items.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        total_items.setForeground(new java.awt.Color(255, 255, 255));

        jLabel3.setFont(new java.awt.Font("Poppins", 0, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Total Obat");

        javax.swing.GroupLayout item_panelLayout = new javax.swing.GroupLayout(item_panel);
        item_panel.setLayout(item_panelLayout);
        item_panelLayout.setHorizontalGroup(
            item_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(item_panelLayout.createSequentialGroup()
                .addComponent(jLabel3)
                .addGap(0, 195, Short.MAX_VALUE))
            .addGroup(item_panelLayout.createSequentialGroup()
                .addComponent(total_items, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        item_panelLayout.setVerticalGroup(
            item_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(item_panelLayout.createSequentialGroup()
                .addComponent(total_items, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3))
        );

        pendapatanperhari.putClientProperty(FlatClientProperties.STYLE, "arc:20");
        pendapatanperhari.setBackground(new java.awt.Color(109, 207, 102));
        pendapatanperhari.setBorder(javax.swing.BorderFactory.createEmptyBorder(8, 8, 8, 5));
        pendapatanperhari.setPreferredSize(new java.awt.Dimension(294, 75));

        pendapatan_harini.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        pendapatan_harini.setForeground(new java.awt.Color(255, 255, 255));

        pendapatanLabel.setFont(new java.awt.Font("Poppins", 0, 16)); // NOI18N
        pendapatanLabel.setForeground(new java.awt.Color(255, 255, 255));
        pendapatanLabel.setText("Pendapatan Hari Ini");

        javax.swing.GroupLayout pendapatanperhariLayout = new javax.swing.GroupLayout(pendapatanperhari);
        pendapatanperhari.setLayout(pendapatanperhariLayout);
        pendapatanperhariLayout.setHorizontalGroup(
            pendapatanperhariLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pendapatanperhariLayout.createSequentialGroup()
                .addComponent(pendapatanLabel)
                .addGap(0, 119, Short.MAX_VALUE))
            .addGroup(pendapatanperhariLayout.createSequentialGroup()
                .addComponent(pendapatan_harini, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pendapatanperhariLayout.setVerticalGroup(
            pendapatanperhariLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pendapatanperhariLayout.createSequentialGroup()
                .addComponent(pendapatan_harini, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pendapatanLabel)
                .addContainerGap())
        );

        pengeluaranperhari.putClientProperty(FlatClientProperties.STYLE, "arc:20");
        pengeluaranperhari.setBackground(new java.awt.Color(215, 9, 83));
        pengeluaranperhari.setBorder(javax.swing.BorderFactory.createEmptyBorder(8, 8, 8, 5));
        pengeluaranperhari.setPreferredSize(new java.awt.Dimension(294, 75));

        pengeluaran_harini.setBackground(new java.awt.Color(102, 184, 207));
        pengeluaran_harini.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        pengeluaran_harini.setForeground(new java.awt.Color(255, 255, 255));

        pengeluaran.setFont(new java.awt.Font("Poppins", 0, 16)); // NOI18N
        pengeluaran.setForeground(new java.awt.Color(255, 255, 255));
        pengeluaran.setText("Pengeluaran Hari ini");

        javax.swing.GroupLayout pengeluaranperhariLayout = new javax.swing.GroupLayout(pengeluaranperhari);
        pengeluaranperhari.setLayout(pengeluaranperhariLayout);
        pengeluaranperhariLayout.setHorizontalGroup(
            pengeluaranperhariLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pengeluaranperhariLayout.createSequentialGroup()
                .addComponent(pengeluaran)
                .addGap(0, 118, Short.MAX_VALUE))
            .addGroup(pengeluaranperhariLayout.createSequentialGroup()
                .addComponent(pengeluaran_harini, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pengeluaranperhariLayout.setVerticalGroup(
            pengeluaranperhariLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pengeluaranperhariLayout.createSequentialGroup()
                .addComponent(pengeluaran_harini, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pengeluaran)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pendapatanperhari, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(item_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addGap(12, 12, 12)
                            .addComponent(pengeluaranperhari, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(12, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(item_panel, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pendapatanperhari, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pengeluaranperhari, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.putClientProperty(FlatClientProperties.STYLE, "arc:20");
        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        panelobatterlaris.putClientProperty(FlatClientProperties.STYLE, "arc:20");
        panelobatterlaris.setBackground(new java.awt.Color(242, 244, 255));

        jScrollPane2.setHorizontalScrollBar(null);

        jPanel7.setBackground(new java.awt.Color(242, 244, 255));
        jPanel7.setLayout(new javax.swing.BoxLayout(jPanel7, javax.swing.BoxLayout.Y_AXIS));
        jScrollPane2.setViewportView(jPanel7);

        javax.swing.GroupLayout panelobatterlarisLayout = new javax.swing.GroupLayout(panelobatterlaris);
        panelobatterlaris.setLayout(panelobatterlarisLayout);
        panelobatterlarisLayout.setHorizontalGroup(
            panelobatterlarisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelobatterlarisLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        panelobatterlarisLayout.setVerticalGroup(
            panelobatterlarisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelobatterlarisLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        infoTerlarisHeader.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        infoTerlarisHeader.setText("Obat Terlaris");

        jButton3.setText("jButton3");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(chart2, javax.swing.GroupLayout.DEFAULT_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelobatterlaris, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(infoTerlarisHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 113, Short.MAX_VALUE)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(infoTerlarisHeader)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelobatterlaris, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chart2, javax.swing.GroupLayout.DEFAULT_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(chart_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(notif_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chart_panel, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(notif_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_formAncestorAdded
        reset();
    }//GEN-LAST:event_formAncestorAdded

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        try {
            DefaultTableModel tabelData = (DefaultTableModel) tableobat.getModel();
            tabelData.setRowCount(0);
            ResultSet data = DB.query(
                    "SELECT obatterlaris.kode_obat,obat.nama_obat,total_penjualan FROM `obatterlaris` JOIN obat ON obat.kode_obat= obatterlaris.kode_obat limit 15");
            int no = 1;

            while (data.next()) {

                Object[] dataArray = { "#" + no, data.getString("nama_obat"),
                        Currency.format(data.getInt("total_penjualan")) };
                tabelData.addRow(dataArray);
                no++;

            }
            modalobat.pack();
            modalobat.setLocationRelativeTo(null);
            modalobat.setVisible(true);

        } catch (SQLException ex) {
            Logger.getLogger(DashboardView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        try {
            DefaultTableModel tabelData = (DefaultTableModel) tablekadaluarsa.getModel();
            tabelData.setRowCount(0);

            ResultSet data = DB.query(
                    "SELECT nama_obat, detail_obat.jumlah_obat,satuan, tanggal_kadaluarsa, CASE WHEN tanggal_kadaluarsa <= CURRENT_DATE THEN 1 ELSE 2 END AS status FROM detail_obat JOIN data_obat ON data_obat.kode_obat = detail_obat.kode_obat WHERE detail_obat.jumlah_obat > 0 AND( tanggal_kadaluarsa <= CURRENT_DATE OR tanggal_kadaluarsa > CURRENT_DATE )AND tanggal_kadaluarsa < CURRENT_DATE + INTERVAL 7 DAY ORDER BY tanggal_kadaluarsa DESC; ");
            int no = 1;

            while (data.next()) {
                String keteranagan = "Sudah Kadaluarsa";
                if (data.getInt("status") == 2) {
                    keteranagan = "Akan Kadaluarsa";
                }
                Object[] dataArray = { no, data.getString("nama_obat"), data.getInt("jumlah_obat"),
                        data.getDate("tanggal_kadaluarsa"), keteranagan };
                tabelData.addRow(dataArray);
                no++;

            }
            modalkadaluarsa.pack();
            modalkadaluarsa.setLocationRelativeTo(null);
            modalkadaluarsa.setVisible(true);

        } catch (SQLException ex) {
            Logger.getLogger(DashboardView.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            DefaultTableModel tabelData = (DefaultTableModel) tabelstok.getModel();
            tabelData.setRowCount(0);

            ResultSet data = DB.query(
                    "SELECT obat.nama_obat,detail_obat.jumlah_obat FROM `detail_obat` JOIN obat ON obat.kode_obat = detail_obat.kode_obat WHERE detail_obat.jumlah_obat <= 10; ");
            int no = 1;

            while (data.next()) {
                int jumlahObat = data.getInt("jumlah_obat");
                String pesan;
                if (jumlahObat == 0) {
                    pesan = "Habis";
                } else {
                    pesan = "Akan Habis";
                }
                Object[] dataArray = { "#" + no, data.getString("nama_obat"), jumlahObat, pesan };
                tabelData.addRow(dataArray);
                no++;

            }

            modalstok.pack();
            modalstok.setLocationRelativeTo(null);
            modalstok.setVisible(true);

        } catch (SQLException ex) {
            Logger.getLogger(DashboardView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void chart() {
        try {
            List<ModelChart> dataPengeluaran = new ArrayList<>();
            java.sql.Connection connection = DB.getConnection();
            Statement statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
                    ResultSet.CONCUR_READ_ONLY);
            LocalDate now = LocalDate.now();
            int tahunSekarang = now.getYear();
            //            tahunn.setText(String.valueOf(tahunSekarang));
            //            ResultSet data = statement.executeQuery("SELECT bulan, SUM(total_pengeluaran) AS total_pengeluaran, SUM(total_penjualan) AS total_penjualan FROM ( SELECT MONTH(tanggal_pengeluaran) AS bulan, SUM(total_pengeluaran) AS total_pengeluaran, NULL AS total_penjualan FROM pengeluaran GROUP BY bulan UNION ALL SELECT MONTH(tanggal_transaksi) AS bulan, NULL AS total_pengeluaran, SUM(total_harga) AS total_penjualan FROM transaksi_penjualan GROUP BY bulan ) AS combined_data GROUP BY bulan;");
            ResultSet data = statement.executeQuery(
                    "SELECT pendapatan,pengeluaran,laba_bersih,RIGHT(bulan_tahun, 2) as bulan FROM `laporan` WHERE bulan_tahun LIKE '"
                            + tahunSekarang + "%'");
            //            ResultSet data = DB.query("SELECT * FROM datachart");
            for (int bulan = 1; bulan <= 12; bulan++) {
                String namaBulan = konversiintbln.getMonth(bulan);
                int pengeluaran = 0;
                int penjualan = 0;
                int laba_bersih = 0;

                // Cari data yang cocok untuk bulan saat ini dalam ResultSet
                while (data.next()) {
                    int bulanData = data.getInt("bulan");
                    if (bulanData == bulan) {
                        String total_pengeluaran = data.getString("pengeluaran");
                        String total_Penjualan = data.getString("pendapatan");
                        String total_lababersih = data.getString("laba_bersih");

                        // Cek dan atur nilai ke 0 jika null
                        //                        if (total_pengeluaran == null) {
                        //                            total_pengeluaran = "0";
                        //                        }
                        //                        if (total_Penjualan == null) {
                        //                            total_Penjualan = "0";
                        //                        }
                        // Tambahkan ke total untuk bulan saat ini
                        pengeluaran += Integer.parseInt(total_pengeluaran);
                        penjualan += Integer.parseInt(total_Penjualan);
                        laba_bersih += Integer.parseInt(total_lababersih);
                    }
                }

                ModelChart s = new ModelChart(namaBulan, new double[] { penjualan, pengeluaran, laba_bersih });
                dataPengeluaran.add(s);

                data.beforeFirst();
            }

            // Tambahkan data ke dalam lineChart
            //            chart1.addLegend("Pendapatan", Color.blue);
            //            chart1.addLegend("Pengeluaran", Color.MAGENTA);
            //            chart1.addLegend("Laba Bersih", Color.ORANGE);
            //
            //            for (ModelChart d : dataPengeluaran) {
            //                chart1.addData(d);
            //            }
            //
            //            chart1.start();
        } catch (SQLException ex) {
            Logger.getLogger(DashboardView.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void ntf_stok() {
        notif_stok.getVerticalScrollBar().setUnitIncrement(16);
        ResultSet data = DB.query(
                "SELECT obat.nama_obat,detail_obat.jumlah_obat FROM `detail_obat` JOIN obat ON obat.kode_obat = detail_obat.kode_obat WHERE detail_obat.jumlah_obat <= min_stok; ");
        String pesan = "";
        try {
            while (data.next()) {
                String namaObat = data.getString("nama_obat");
                int jumlahObat = data.getInt("jumlah_obat");
                //                System.out.println(jumlahObat);
                if (jumlahObat == 0) {
                    pesan = "<html>Stok Obat " + namaObat + " <font color='red'>Telah Habis</font> </html>";
                } else {
                    pesan = "<html>Stok Obat " + namaObat + " <font color='orange'>Akan Segera Habis Tersisa</font> "
                            + jumlahObat + "</html>";
                }
                JLabel LABEL = new JLabel(pesan);
                LABEL.setMaximumSize(new Dimension(300, 40));
                LABEL.setFont(new Font("Poppins medium", Font.PLAIN, 14));
                LABEL.setBorder(new EmptyBorder(20, 5, 20, 5));
                jPanel3.add(LABEL);
            }
        } catch (Exception e) {
            System.err.println("query error: " + e.getMessage());
        }
    }

    private void ntf_exp() {
        notif_exp.getVerticalScrollBar().setUnitIncrement(16);
        //        jPanel1.setLayout(new BoxLayout(jPanel1, BoxLayout.Y_AXIS));
        int yPos = 20;
        LocalDate date = LocalDate.now();
        ResultSet data = DB.query(
                "SELECT nama_obat, detail_obat.jumlah_obat,satuan, tanggal_kadaluarsa, CASE WHEN tanggal_kadaluarsa <= CURRENT_DATE THEN 1 ELSE 2 END AS status FROM detail_obat JOIN data_obat ON data_obat.kode_obat = detail_obat.kode_obat WHERE detail_obat.jumlah_obat > 0 AND( tanggal_kadaluarsa <= CURRENT_DATE OR tanggal_kadaluarsa > CURRENT_DATE )AND tanggal_kadaluarsa < CURRENT_DATE + INTERVAL 7 DAY ORDER BY tanggal_kadaluarsa DESC limit 10; ");
        String pesan = "";
        try {
            while (data.next()) {
                String namaObat = data.getString("nama_obat");
                String jumlahObat = data.getString("jumlah_obat");
                //                pesan = "Obat " + namaObat + " telah kadaluarsa sebanyak " + jumlahObat;
                LocalDate tanggalKadaluarsa = data.getDate("tanggal_kadaluarsa").toLocalDate();
                long selisihHari = ChronoUnit.DAYS.between(tanggalKadaluarsa, LocalDate.now());
                //                pesan = "<html>Obat " + namaObat + " telah kadaluarsa sebanyak " + jumlahObat + "</html>";
                pesan = "<html><p>" + jumlahObat + "" + " " + data.getString("satuan") + "  obat " + namaObat
                        + " <font color='red'>telah kadaluarsa </font> </p> </html>";
                if (data.getInt("status") == 2) {
                    pesan = "<html><p>" + jumlahObat + "" + " " + data.getString("satuan") + "  obat " + namaObat
                            + "  <font color='orange'>akan segera kadaluarsa </font>  </p></html>";

                }
                JPanel jp = new JPanel();
                jp.setBackground(Color.white);
                jp.setMaximumSize(new Dimension(300, 60));
                jp.setLayout(new BoxLayout(jp, BoxLayout.Y_AXIS));
                jp.setBorder(new EmptyBorder(2, 2, 2, 2));
                JLabel label = new JLabel(pesan);
                //                label.setMaximumSize(new Dimension(300, 40));
                label.setFont(new Font("Poppins semibold", Font.PLAIN, 14));
                jp.add(label);

                //                label.setBounds(0, yPos, 300, 30); // Atur koordinat dan ukuran label
                //                jPanel1.add(label);
                String pesantgl;
                if (selisihHari != 0) {
                    pesantgl = "Tgl Exp : " + FormatTanggal.formatDate(java.sql.Date.valueOf(tanggalKadaluarsa));
                    //                    +selisihHari + " Yang Lalu";
                } else {
                    pesantgl = "hari ini";
                }

                JLabel labelSelisihHari = new JLabel(pesantgl);
                labelSelisihHari.setFont(new Font("Poppins", Font.PLAIN, 12));

                jp.add(labelSelisihHari);
                jPanel12.add(jp);
                // Tinggi setiap label + margin
                //                yPos += 40;
            }
        } catch (Exception e) {
            System.err.println("query error: " + e.getMessage());
        }
    }

    private void panelchartterlaris() {
        ResultSet data = DB.query("SELECT * FROM `obatterlaris` limit 10;");
        //        notif_stok.getVerticalScrollBar().setUnitIncrement(16);

        int i = 1;
        try {
            while (data.next()) {
                chart2.addData(Integer.parseInt(data.getString("total_penjualan")));
                JLabel LABEL = new JLabel("<html><p>#" + (i++) + " " + data.getString("nama_obat") + "</html></p>");
                LABEL.setMaximumSize(new Dimension(300, 10));
                LABEL.setFont(new Font("Poppins medium", Font.PLAIN, 12));
                LABEL.setBorder(new EmptyBorder(20, 5, 20, 5));

                // Membuat objek GridBagConstraints
                jPanel7.add(LABEL);
                jPanel7.add(Box.createVerticalStrut(10));
            }
            chart2.start();

        } catch (SQLException e) {
            System.err.println("query error: " + e.getMessage());
        }
    }

    private void items() {
        //Total Item
        ResultSet data = DB.query("SELECT COUNT(*) as total FROM obat WHERE jumlah_obat != 0");
        String pesan = "";
        try {
            if (data.next()) {
                // Memeriksa apakah ada hasil dari query
                int total = data.getInt("total");
                pesan = total + " item";
            } else {
                // Jika tidak ada data yang ditemukan, menampilkan "0 items"
                pesan = "0 item";
            }
            total_items.setText(pesan);
        } catch (Exception e) {
            System.err.println("query error: " + e.getMessage());
        }
    }

    private void pendapatan1hari() {
        //Pendapatan Per Hari
        LocalDate date = LocalDate.now();
        ResultSet data = DB
                .query("SELECT SUM(total_harga) as total FROM transaksi_penjualan WHERE DATE(tanggal_transaksi) = '"
                        + date + "'");
        String pesan = "";
        try {
            if (data.next()) {
                // Memeriksa apakah ada hasil dari query
                int total = data.getInt("total");
                pendapatan_harini.setText(Currency.format(total));
            } else {
                // Jika tidak ada data yang ditemukan, menampilkan "0 items"
                pendapatan_harini.setText("Rp.0");
            }
            Date currentDate = new Date();

            // Membuat format tanggal
            SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");

            // Memformat tanggal
            String formattedDate = dateFormat.format(currentDate);

            pendapatanLabel.setText("Pendapatan  hari ini");

        } catch (Exception e) {
            System.err.println("query error: " + e.getMessage());
        }
    }

    private void pengeluaran1hari() {
        //Pendapatan Per Hari
        LocalDate date = LocalDate.now();
        int monthNow = date.getMonthValue();
        ResultSet data = DB
                .query("SELECT SUM(total_pengeluaran) as total FROM pengeluaran WHERE MONTH(tanggal_pengeluaran) = '"
                        + monthNow + "'");
        String pesan = "";
        String[] monthName = { "Januari", "Februari",
                "Maret", "April", "Mei", "Juni", "Juli",
                "Agustus", "September", "Oktober", "November",
                "Desember" };

        Calendar cal = Calendar.getInstance();
        String month = monthName[cal.get(Calendar.MONTH)];
        try {
            if (data.next()) {
                // Memeriksa apakah ada hasil dari query
                int total = data.getInt("total");
                pengeluaran_harini.setText(Currency.format(total));
                pengeluaran.setText("Pengeluaran bulan " + month);
            } else {
                // Jika tidak ada data yang ditemukan, menampilkan "0 items"
                pengeluaran_harini.setText("Rp.0");
            }

        } catch (Exception e) {
            System.err.println("query error: " + e.getMessage());
        }
    }

    private void createLineChart() {
        lineChart = new LineChart();
        lineChart.setChartType(LineChart.ChartType.LINE);
        lineChart.putClientProperty(FlatClientProperties.STYLE, ""
                + "border:5,5,5,5,#FFFFFF,,20");
        //        chart_panel.setLayout(new MigLayout("wrap,fill,gap 10", "fill"));
        lineChart.setBackground(Color.white);
        chart_panel.add(lineChart);
        createLineChartData();
    }

 
    private void createLineChartData() {
        try {
            DefaultCategoryDataset<String, String> categoryDataset = new DefaultCategoryDataset<>();
            Calendar cal = Calendar.getInstance();
            SimpleDateFormat df = new SimpleDateFormat("MMM"); // Mengubah format tanggal menjadi bulan dan tahun saja
            Random ran = new Random();
            java.sql.Connection connection = DB.getConnection();
            Statement statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
                    ResultSet.CONCUR_READ_ONLY);
            LocalDate now = LocalDate.now();
            int tahunSekarang = now.getYear();
            int randomMonth = 12; // Menggunakan 12 bulan
            ResultSet data = statement.executeQuery(
                    "SELECT pendapatan,pengeluaran,laba_bersih,RIGHT(bulan_tahun,2) as bulan FROM chartview  WHERE LEFT(bulan_tahun,4) ="
                            + tahunSekarang);

            //            categoryDataset.addValue(ran.nextInt(700) + 5, "Income", "jan");
            //            categoryDataset.addValue(ran.nextInt(700) + 5, "Expense", "jan");
            //            categoryDataset.addValue(ran.nextInt(700) + 5, "Profit", "jan");
            //            for (int i = 1; i <= randomMonth; i++) { // Menggunakan konstanta bulan dari JANUARI (0) sampai DESEMBER (11)
            //            cal.set(Calendar.MONTH, i); // Mengatur bulan pada kalendar
            //                System.out.println("s" + i);
            //            String date = df.format(cal.getTime());
            //            while (data.next()) {
            //                int bulanData = data.getInt("bulan");
            ////                cal.set(Calendar.MONTH, i);
            ////                                String date = df.format(cal.getTime());
            ////                    if (bulanData == i) {
            ////                        System.out.println("ap");
            //                        categoryDataset.addValue(Integer.valueOf(data.getString("pengeluaran")), "Pemasukan", date);
            //                        categoryDataset.addValue(Integer.valueOf(data.getString("pengeluaran")), "Pengeluaran", date);
            //                        categoryDataset.addValue(Integer.valueOf(data.getString("laba_bersih")), "Laba Bersih", date);
            ////                    }
            //
            ////                }
            ////                String total_pengeluaran = data.getString("pengeluaran");
            ////                String total_Penjualan = data.getString("pendapatan");
            ////                String total_lababersih = data.getString("laba_bersih");
            //                int[] monthlyData = {Integer.valueOf(data.getString("pengeluaran")), Integer.valueOf(data.getString("pengeluaran")), Integer.valueOf(data.getString("laba_bersih"))};
            //                monthlyDataMap.put(data.getInt("bulan"), monthlyData);
            //            }

            for (int i = 1; i <= 12; i++) {
                cal.set(Calendar.MONTH, i - 1);
                String date = df.format(cal.getTime());
                boolean found = false;
                while (data.next()) {
                    int month = data.getInt("bulan");
                    if (month == i) {
                        categoryDataset.addValue(Integer.valueOf(data.getString("pendapatan")), "Pendapatan", date);
                        categoryDataset.addValue(Integer.valueOf(data.getString("pengeluaran")), "Pengeluaran", date);
                        categoryDataset.addValue(Integer.valueOf(data.getString("laba_bersih")), "Laba Bersih", date);
                        found = true;
                        break;
                    }
                }
                if (!found) {
                    categoryDataset.addValue(0, "Pendapatan", date);
                    categoryDataset.addValue(0, "Pengeluaran", date);
                    categoryDataset.addValue(0, "Laba Bersih", date);
                }
                data.beforeFirst(); // reset result set to beginning
            }
            /**
             * Remove the control of legend spacing
             */
            lineChart.setLegendRenderer(new ChartLegendRenderer());

            lineChart.setCategoryDataset(categoryDataset);
            lineChart.getChartColor().addColor(Color.decode("#38bdf8"), Color.decode("#fb7185"),
                    Color.decode("#34d399"));

            //            tahunn.setText(String.valueOf(tahunSekarang));
            JLabel header = new JLabel("Laporan Tahun " + String.valueOf(tahunSekarang));
            header.putClientProperty(FlatClientProperties.STYLE, ""
                    + "font:+1;"
                    + "border:0,0,5,0");
            header.setFont(new Font("Poppins", Font.BOLD, 16));

            lineChart.setHeader(header);
        } catch (SQLException ex) {
            Logger.getLogger(DashboardView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    //     private void createLineChart() {
    //         lineChart = new LineChart();
    //         lineChart.setChartType(LineChart.ChartType.LINE);
    //         lineChart.putClientProperty(FlatClientProperties.STYLE, ""
    //                 + "border:5,5,5,5,#FFFFFF,,20");
    // //        chart_panel.setLayout(new MigLayout("wrap,fill,gap 10", "fill"));
    //         lineChart.setBackground(Color.white);
    //         chart_panel.add(lineChart);
    //         createLineChartData();
    //     }

    //     private void createLineChartData() {
    //         try {
    //             DefaultCategoryDataset<String, String> categoryDataset = new DefaultCategoryDataset<>();
    //             Calendar cal = Calendar.getInstance();
    //             SimpleDateFormat df = new SimpleDateFormat("MMM"); // Mengubah format tanggal menjadi bulan dan tahun saja
    //             Random ran = new Random();
    //             java.sql.Connection connection = DB.getConnection();
    //             Statement statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
    //             LocalDate now = LocalDate.now();
    //             int tahunSekarang = now.getYear();
    //             int randomMonth = 12; // Menggunakan 12 bulan
    //             ResultSet data = statement.executeQuery("SELECT pendapatan,pengeluaran,laba_bersih,RIGHT(bulan_tahun, 2) as bulan FROM `laporan` WHERE bulan_tahun LIKE '%2023%'");
    // //            categoryDataset.addValue(ran.nextInt(700) + 5, "Income", "jan");
    // //            categoryDataset.addValue(ran.nextInt(700) + 5, "Expense", "jan");
    // //            categoryDataset.addValue(ran.nextInt(700) + 5, "Profit", "jan");
    // //            for (int i = 1; i <= randomMonth; i++) { // Menggunakan konstanta bulan dari JANUARI (0) sampai DESEMBER (11)
    // //            cal.set(Calendar.MONTH, i); // Mengatur bulan pada kalendar
    // //                System.out.println("s" + i);
    // //            String date = df.format(cal.getTime());
    // //            while (data.next()) {
    // //                int bulanData = data.getInt("bulan");
    // ////                cal.set(Calendar.MONTH, i);
    // ////                                String date = df.format(cal.getTime());
    // ////                    if (bulanData == i) {
    // ////                        System.out.println("ap");
    // //                        categoryDataset.addValue(Integer.valueOf(data.getString("pengeluaran")), "Pemasukan", date);
    // //                        categoryDataset.addValue(Integer.valueOf(data.getString("pengeluaran")), "Pengeluaran", date);
    // //                        categoryDataset.addValue(Integer.valueOf(data.getString("laba_bersih")), "Laba Bersih", date);
    // ////                    }
    // //
    // ////                }
    // ////                String total_pengeluaran = data.getString("pengeluaran");
    // ////                String total_Penjualan = data.getString("pendapatan");
    // ////                String total_lababersih = data.getString("laba_bersih");
    // //                int[] monthlyData = {Integer.valueOf(data.getString("pengeluaran")), Integer.valueOf(data.getString("pengeluaran")), Integer.valueOf(data.getString("laba_bersih"))};
    // //                monthlyDataMap.put(data.getInt("bulan"), monthlyData);
    // //            }

    //             for (int i = 1; i <= 12; i++) {
    //                 cal.set(Calendar.MONTH, i - 1);
    //                 String date = df.format(cal.getTime());
    //                 boolean found = false;
    //                 while (data.next()) {
    //                     int month = data.getInt("bulan");
    //                     if (month == i) {
    //                         categoryDataset.addValue(Integer.valueOf(data.getString("pendapatan")), "Pendapatan", date);
    //                         categoryDataset.addValue(Integer.valueOf(data.getString("pengeluaran")), "Pengeluaran", date);
    //                         categoryDataset.addValue(Integer.valueOf(data.getString("laba_bersih")), "Laba Bersih", date);
    //                         found = true;
    //                         break;
    //                     }
    //                 }
    //                 if (!found) {
    //                     categoryDataset.addValue(0, "Pendapatan", date);
    //                     categoryDataset.addValue(0, "Pengeluaran", date);
    //                     categoryDataset.addValue(0, "Laba Bersih", date);
    //                 }
    //                 data.beforeFirst(); // reset result set to beginning
    //             }
    //             /**
    //              * Remove the control of legend spacing
    //              */
    //             lineChart.setLegendRenderer(new ChartLegendRenderer());

    //             lineChart.setCategoryDataset(categoryDataset);
    //             lineChart.getChartColor().addColor(Color.decode("#38bdf8"), Color.decode("#fb7185"), Color.decode("#34d399"));

    // //            tahunn.setText(String.valueOf(tahunSekarang));
    //             JLabel header = new JLabel("Laporan Tahun " + String.valueOf(tahunSekarang));
    //             header.putClientProperty(FlatClientProperties.STYLE, ""
    //                     + "font:+1;"
    //                     + "border:0,0,5,0");
    //             header.setFont(new Font("Poppins", Font.BOLD, 16));

    //             lineChart.setHeader(header);
    //         } catch (SQLException ex) {
    //             Logger.getLogger(DashboardView.class.getName()).log(Level.SEVERE, null, ex);
    //         }
    //     }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private chartsinglebar.Chart chart2;
    private javax.swing.JPanel chart_panel;
    private javax.swing.JLabel desc_terlaris;
    private javax.swing.JLabel infoTerlarisHeader;
    private javax.swing.JPanel item_panel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JDialog modalkadaluarsa;
    private javax.swing.JDialog modalobat;
    private javax.swing.JDialog modalstok;
    private javax.swing.JScrollPane notif_exp;
    private javax.swing.JPanel notif_panel;
    private javax.swing.JScrollPane notif_stok;
    private javax.swing.JPanel panelobatterlaris;
    private javax.swing.JLabel pendapatanLabel;
    private javax.swing.JLabel pendapatan_harini;
    private javax.swing.JPanel pendapatanperhari;
    private javax.swing.JLabel pengeluaran;
    private javax.swing.JLabel pengeluaran_harini;
    private javax.swing.JPanel pengeluaranperhari;
    private javax.swing.JTable tabelstok;
    private javax.swing.JTable tablekadaluarsa;
    private javax.swing.JTable tableobat;
    private javax.swing.JLabel total_items;
    // End of variables declaration//GEN-END:variables
}
